import pyaudio
import wave
import sounddevice as sd
import numpy as np
import subprocess
import threading
import time
import pyautogui
import cv2

# 自动选择音频设备
def get_device_index(preferred_devices):
    devices = sd.query_devices()
    for i, device in enumerate(devices):
        for preferred_device in preferred_devices:
            if preferred_device.lower() in device['name'].lower():
                print(f"选择设备: {device['name']}")
                return i
    return None

# 录制系统音频
def record_audio(filename, fs=44100, preferred_devices=None, stop_event=None):
    if preferred_devices is None:
        preferred_devices = ['system audio 1', 'system audio 2']

    device_index = get_device_index(preferred_devices)

    if device_index is None:
        print("没有找到首选设备，使用默认设备。")
        device_index = 0  # 默认设备

    print(f"开始录制，使用设备 {device_index}...")

    audio_data = []
    while not stop_event.is_set():
        data = sd.rec(int(1024), samplerate=fs, channels=2, dtype='int16', device=device_index)
        sd.wait()
        audio_data.append(data)

    audio_data = np.concatenate(audio_data, axis=0)  # 将所有音频片段连接
    write_wav_file(filename, audio_data, fs)
    print(f"录制完成，保存为 {filename}")

# 保存音频文件
def write_wav_file(filename, audio_data, fs):
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(2)
        wf.setsampwidth(2)  # 每个样本占2字节
        wf.setframerate(fs)
        wf.writeframes(audio_data.tobytes())

# 合成音频与视频
def merge_audio_video(audio_file1, audio_file2, video_file, output_file):
    command = f'ffmpeg -i {video_file} -i {audio_file1} -i {audio_file2} -c:v copy -c:a aac -strict experimental {output_file}'
    subprocess.run(command, shell=True)
    print(f"音频与视频合成完成，输出文件: {output_file}")

# 屏幕录制
def screen_record(filename, stop_event):
    screen = pyautogui.screenshot(region=(0, 0, 1920, 1080))  # 设置录制区域
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(filename, fourcc, 30.0, (1920, 1080))

    while not stop_event.is_set():
        frame = np.array(screen)
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        out.write(frame)
        screen = pyautogui.screenshot(region=(0, 0, 1920, 1080))
        time.sleep(0.03)  # 保持30帧每秒

    out.release()

# 录制麦克风
def record_microphone(filename, stop_event, fs=44100):
    preferred_devices = ['mic 1', 'mic 2']
    device_index = get_device_index(preferred_devices)

    if device_index is None:
        print("没有找到首选麦克风设备，使用默认设备。")
        device_index = 0  # 默认设备

    print(f"开始录制麦克风，使用设备 {device_index}...")

    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=fs, input=True, frames_per_buffer=1024, input_device_index=device_index)
    
    frames = []
    
    while not stop_event.is_set():
        data = stream.read(1024)
        frames.append(data)
    
    wf = wave.open(filename, 'wb')
    wf.setnchannels(1)
    wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
    wf.setframerate(fs)
    wf.writeframes(b''.join(frames))
    wf.close()

# 停止录制功能
def stop_recording(screen_thread, mic_thread, system_thread, stop_event):
    stop_event.set()
    screen_thread.join()
    mic_thread.join()
    system_thread.join()
    print("录制已停止。")

if __name__ == '__main__':
    stop_event = threading.Event()

    # 启动线程来录制屏幕
    screen_thread = threading.Thread(target=screen_record, args=("output_video.avi", stop_event))
    screen_thread.start()

    # 启动线程来录制麦克风
    mic_thread = threading.Thread(target=record_microphone, args=("microphone_audio.wav", stop_event))
    mic_thread.start()

    # 启动线程来录制系统音频
    system_thread = threading.Thread(target=record_audio, args=("system_audio.wav", stop_event))
    system_thread.start()

    print("录制已开始，按 'q' 停止录制...")

    # 等待用户输入停止命令
    while True:
        user_input = input("请输入 'q' 停止录制: ")
        if user_input.lower() == 'q':
            stop_recording(screen_thread, mic_thread, system_thread, stop_event)
            break

    # 合成音频与视频
    print("正在合成音频与视频...")
    merge_audio_video("system_audio.wav", "microphone_audio.wav", "output_video.avi", "final_output.mp4")
    print("合成完成，文件为 final_output.mp4")
