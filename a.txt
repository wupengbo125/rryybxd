import cv2
import numpy as np
import pyautogui
import sounddevice as sd
import pyaudio
import threading
import time
from moviepy.editor import concatenate_videoclips, AudioFileClip, VideoFileClip
import os
from datetime import datetime

# 配置文件夹和文件名
desktop_path = os.path.expanduser("~/Desktop")
video_file = os.path.join(desktop_path, "video_temp.mp4")
audio_file_mic = os.path.join(desktop_path, "audio_mic.wav")
audio_file_sys = os.path.join(desktop_path, "audio_sys.wav")

# 屏幕录制设置
frame_rate = 30
screen_size = pyautogui.size()
fourcc = cv2.VideoWriter_fourcc(*"mp4v")
video_writer = cv2.VideoWriter(video_file, fourcc, frame_rate, screen_size)

# 设置音频设备
mic_device_1 = "麦克风一"
mic_device_2 = "麦克风二"
sys_device_1 = "系统声音1"
sys_device_2 = "系统声音2"

# 音频录制参数
sample_rate = 44100
channels = 2
duration = 10  # 初步设置时长，后续可以修改

# 存储音频
mic_audio = []
sys_audio = []

def get_audio_device_id(name):
    p = pyaudio.PyAudio()
    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if name in device_info["name"]:
            return i
    return None

def record_screen():
    while True:
        # 获取屏幕图像
        screen_image = pyautogui.screenshot()
        frame = np.array(screen_image)
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        video_writer.write(frame)
        time.sleep(1 / frame_rate)

def record_microphone():
    mic_device_id = get_audio_device_id(mic_device_1)
    if mic_device_id is None:
        mic_device_id = get_audio_device_id(mic_device_2)
    if mic_device_id is not None:
        def callback(indata, frames, time, status):
            if status:
                print(status)
            mic_audio.append(indata)
        with sd.InputStream(device=mic_device_id, channels=channels, samplerate=sample_rate, callback=callback):
            while True:
                time.sleep(1)
    else:
        print("麦克风设备不可用")

def record_system_audio():
    sys_device_id = get_audio_device_id(sys_device_1)
    if sys_device_id is None:
        sys_device_id = get_audio_device_id(sys_device_2)
    if sys_device_id is not None:
        def callback(indata, frames, time, status):
            if status:
                print(status)
            sys_audio.append(indata)
        with sd.InputStream(device=sys_device_id, channels=channels, samplerate=sample_rate, callback=callback):
            while True:
                time.sleep(1)
    else:
        print("系统音频设备不可用")

def save_audio():
    # 保存音频
    mic_audio_np = np.concatenate(mic_audio, axis=0)
    sys_audio_np = np.concatenate(sys_audio, axis=0)
    # 可以使用wave文件格式保存
    sd.write(audio_file_mic, mic_audio_np, sample_rate)
    sd.write(audio_file_sys, sys_audio_np, sample_rate)

def merge_video_audio():
    # 合并视频和音频
    video_clip = VideoFileClip(video_file)
    audio_mic_clip = AudioFileClip(audio_file_mic)
    audio_sys_clip = AudioFileClip(audio_file_sys)

    final_audio = audio_mic_clip.overlay(audio_sys_clip)
    final_video = video_clip.set_audio(final_audio)
    
    # 最终文件名
    final_filename = f"abv_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.mp4"
    final_file_path = os.path.join(desktop_path, final_filename)
    final_video.write_videofile(final_file_path, codec="libx264")

    # 删除临时文件
    os.remove(video_file)
    os.remove(audio_file_mic)
    os.remove(audio_file_sys)

def stop_recording():
    while True:
        user_input = input("输入 'q' 停止录制: ")
        if user_input.lower() == 'q':
            break

def main():
    # 启动线程
    screen_thread = threading.Thread(target=record_screen)
    mic_thread = threading.Thread(target=record_microphone)
    sys_thread = threading.Thread(target=record_system_audio)
    stop_thread = threading.Thread(target=stop_recording)

    screen_thread.start()
    mic_thread.start()
    sys_thread.start()
    stop_thread.start()

    stop_thread.join()
    save_audio()
    merge_video_audio()

if __name__ == "__main__":
    main()
